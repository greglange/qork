#!/usr/bin/python
# Copyright (c) 2013 Greg Lange
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied. See the License for the specific language governing
# permissions and limitations under the License

from optparse import OptionParser
from swift.common import utils
from sys import argv, exit
import qork.queue


def help_exit():
    print '%s -h to see usage' % (argv[0])


def make_search_dicts(options):
    meta, body = {}, {}

    for key in 'message_id end_timestamp begin_timestamp queue_name'.split():
        if getattr(options, key):
            meta[key] = getattr(options, key)

    for key in 'worker_type'.split():
        if getattr(options, key):
            body[key] = getattr(options, key)

    return meta, body


if __name__ == '__main__':
    parser = OptionParser(usage='%prog CONF_FILE [options]')
    parser.add_option('-G', '--global-queues', dest='global_queues',
        action='store_true', default=False,
        help='List global queues with message counts')
    parser.add_option('-L', '--list-queues', dest='list_all_queues',
        action='store_true', default=False,
        help='List all work queues with message counts')
    parser.add_option('-P', '--print-messages', dest='print_all_messages',
        action='store_true', default=False,
        help='Print all messages in all work queues')
    parser.add_option('-D', '--delete-queue', dest='delete_queue',
        default=None, help='Delete specified queue')
    parser.add_option('-X', '--delete-queues', dest='delete_queues',
        default=False,
        help='Delete all queues with prefix DELETE_QUEUES')

    parser.add_option('-p', '--print', dest='print_messages',
        default=False, help='print messages')
    parser.add_option('-r', '--restore', dest='restore_messages',
        default=False, help='restore messages')
    parser.add_option('-d', '--delete', dest='delete_messages',
        default=False, help='delete messages')

    parser.add_option('-M', '--message_count', default=None,
        dest='message_count', help='Print message count for queue')

    parser.add_option('-w', '--worker-type', default=None, dest='worker_type',
        help='Limit actions taken to this worker type')
    parser.add_option('-m', '--message-id', default=None, dest='message_id',
        help='Limit actions taken to this message id')
    parser.add_option('-q', '--queue-name', default=None,
        dest='queue_name', help='Limit actions taken to this queue name')
    parser.add_option('-b', '--begin-timestamp', default=None,
        dest='begin_timestamp',
        help='Limit actions taken to after (or equal) this timestamp')
    parser.add_option('-e', '--end-timestamp', default=None,
        dest='end_timestamp',
        help='Limit actions taken to before this timestamp')

    args = argv[1:]
    if not args or len(args) < 2:
        args.append('-h')

    (options, args) = parser.parse_args(args)

    if len(args) != 1:
        help_exit()

    conf = utils.readconf(args[0], 'qork')

    # that last param is whack
    queue = __import__(conf['queue_module'], globals(), locals(), [''])

    if options.global_queues:
        qr = queue.QueueReader(conf)
        for q in qr.get_global_queues():
            print '%s: %d' % (q.name, q.message_count())
    elif options.list_all_queues:
        qr = queue.QueueReader(conf)
        for q in qr.get_all_queues():
            print '%s: %d' % (q.name, q.message_count())
    elif options.print_all_messages:
        qr = queue.QueueReader(conf)
        for q in qr.get_all_queues():
            for message in q.read_messages():
                print message
    elif options.delete_queue:
        q = queue.MessageQueue(conf, options.delete_queue)
        q.delete()
    elif options.delete_queues:
        qr = queue.QueueReader(conf)
        for q in qr.get_all_queues():
            if q.name.startswith(options.delete_queues):
                q.delete()
    elif options.print_messages:
        q = queue.MessageQueue(conf, options.print_messages)
        for message in q.search_messages(*make_search_dicts(options)):
            print message
    elif options.restore_messages:
        q = queue.MessageQueue(conf, options.restore_messages)
        for message in q.search_messages(*make_search_dicts(options)):
            message.restore()
    elif options.delete_messages:
        q = queue.MessageQueue(conf, options.delete_messages)
        for message in q.search_messages(*make_search_dicts(options)):
            message.delete()
    elif options.message_count:
        q = queue.MessageQueue(conf, options.message_count)
        print '%s: %d' % (q.name, q.message_count())
        if not options.message_count.endswith('_failure'):
            failure_queue = '%s_failure' % options.message_count
            q = queue.MessageQueue(conf, failure_queue)
            print '%s: %d' % (q.name, q.message_count())
    else:
        help_exit()
